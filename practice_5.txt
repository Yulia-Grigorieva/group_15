1.Критерии выбора тестов
Свойства хорошего тест-кейса:
- обладает высокой вероятностью обнаружения ошибки
- исследует соответствующую область приложения
- выполняет какие-то интересные действия
- не выполняет ненужных действий
- является не слишком простым, но и не слишком сложным
- не является избыточным по отношению к другим тестам
- делает обнаруженную ошибку очевидной
- позволяет легко диагностировать ошибку
- легко модифицируется
- не зависит от  других тестов
- не зависит от конкретных данных

Требования к идеальному критерию тестирования
 Достаточность (некоторое конечное множество тестов достаточно для тестирования данной программы)
 Полнота (в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку)
 Надежность (любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы)
 Легкая проверяемость 

Классы критериев:
Структурные критерии (критерии белого ящика) используют информацию о структуре программы, предполагают знание исходного текста программы или спецификации программы, часто используются на этапах модульного и интеграционного тестирования (Unit testing, Integration testing).
Функциональные критерии (критерии черного ящика) формулируются в описании требований к программному изделию. Это  важнейший для программной индустрии критерий тестирования. Он обеспечивает контроль степени выполнения требований заказчика в программном продукте. Проблема функционального тестирования - трудоемкость, так как документы, фиксирующие требования к программному изделию (Software requirement specification, Functional specification и т.п.),достаточно объемны.
 Виды функциональных критериев:
- тестирование пунктов спецификации: набор тестов в совокупности должен обеспечить проверку каждого тестируемого пункта не менее одного раза
- тестирование классов входных данных: набор тестов в совокупности должен обеспечить проверку представителя каждого класса входных данных не менее одного раза.
- тестирование правил: набор тестов в совокупности должен обеспечить проверку каждого правила, если входные и выходные значения описываются набором правил некоторой грамматики; грамматика должна быть достаточно простой, чтобы трудоемкость разработки соответствующего набора тестов была реальной.
- тестирование классов выходных данных: набор тестов в совокупности должен обеспечить проверку представителя каждого выходного класса.
- тестирование функций: набор тестов в совокупности должен обеспечить проверку каждого действия, реализуемого тестируемым модулем, не менее одного раза; не обеспечивает покрытия части функциональности тестируемого компонента, связанной со структурными и поведенческими свойствами.
- комбинированные критерии для программ и спецификаций: набор тестов в совокупности должен обеспечить проверку всех комбинаций непротиворечивых условий программ и спецификаций не менее одного раза. При этом все комбинации непротиворечивых условий надо подтвердить, а условия противоречий следует обнаружить и ликвидировать.

2. Импакт анализ
 Impact Analysis (импакт анализ) - это исследование, которое позволяет указать затронутые места (affected areas) в проекте при разработке новой или изменении старой функциональности, а также определить, насколько значительно они были затронуты. Затронутые области требуют большего внимания во время проведения регрессионного тестирования.
Импакт анализ может быть полезным в следующих случаях:
- есть изменения в требованиях;
- получен запрос на внесение изменений в продукт;
- ожидается внедрение нового модуля или функциональности в существующий продукт;
- каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.
Информация о взаимосвязи и взаимном влиянии изменений могут помочь QA:
-- сфокусироваться на тестировании функциональности, где изменения были представлены;
-- принять во внимание части проекта, которые были затронуты изменениями и, возможно, пострадали;
-- не тратить время на тестирование тех частей проекта, которые не были затронуты изменениями.
Как проводить импакт анализ:
1. Самое основное и базовое, что нужно сделать, - это внимательно изучить ишью в баг-трекинговой системе. Следует обратить внимание на все поля, некоторые важные условия или особенности, описанные в ишью, помогут идентифицировать область тестирования.
2. Читать e-mails, в которых можно найти больше информации от заказчиков, результаты исследований от других членов команды, списки похожих проблем, графики, схемы, картинки и др.
3. Разговаривать с разработчиками о сделанных изменениях; хороший разработчик, понимающий, что чем раньше баг будет обнаружен, тем дешевле будет его исправить, поможет советом, даже если будет абсолютно уверен в своих сделанных изменениях.
4. Изучить конкретный файл/функцию/модуль, в который были внесены изменения и который следует проверить на наличие регрессий.
5. Изучить описания изменений; для этого разработчики должны писать граммотные и понятные описания.
6. Исследовать код изменений; для этого нужно читать код и представлять, что он делает.

3. Тестирование со сдвигом влево
Подход к тестированию программного обеспечения и тестированию системы, при котором тестирование выполняется на более раннем этапе жизненного цикла ПО. При перенесении тестирование на более ранний этап жизненного цикла разработки при одновременном улучшении показателей качества, задачи смещаются влево в схеме жизненного цикла разработки ПО. По возможности, тестирование должно проводиться с самого начала фазы проектирования, чтобы построить соответствующую стратегию тестирования.
Преимущества:
-- Сокращение затрат 
-- Более высокое качество
-- Повышение эффективности
-- Конкурентные преимущества

4. 
